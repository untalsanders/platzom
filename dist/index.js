function platzom(str) {
  var translation = str;

  /*
   * Si la palabra termina con "ar", se le quitan esas dos letras
   */
  if (str.toLowerCase().endsWith('ar')) {
    translation = str.slice(0, -2);
  }

  /*
   * Si la palabra inicia con Z, se le añade "pe" al final.
   */
  if (str.toLowerCase().startsWith('z')) {
    translation += 'pe';
  }

  /*
   * Si la palabra traducida tiene 10 o más letras,
   * se debe partir en dos por la mitad y unir con un guión medio
   */
  var length = translation.length;
  if (length >= 10) {
    var firstHalf = translation.slice(0, Math.round(length / 2));
    var secondtHalf = translation.slice(Math.round(length / 2));
    translation = "".concat(firstHalf, "-").concat(secondtHalf);
  }
  function minMay(str) {
    var length = str.length;
    var translation = '';
    var capitalize = true;
    for (var i = 0; i < length; i++) {
      var _char = str.charAt(i);
      translation += capitalize ? _char.toUpperCase() : _char.toLowerCase();
      capitalize = !capitalize;
    }
    return translation;
  }
  function reverse(str) {
    return str.split('').reverse().join('');
  }

  /*
   * Por último, si la palabra original es un palíndromo,
   * ninguna regla anterior cuenta y se devuelve la misma palabra pero
   * intercalando letras mayúsculas y minúsculas
   */
  if (str == reverse(str)) {
    return minMay(str);
  }
  return translation;
}

export { platzom as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGxhdHpvbShzdHIpIHtcbiAgICBsZXQgdHJhbnNsYXRpb24gPSBzdHJcblxuICAgIC8qXG4gICAgICogU2kgbGEgcGFsYWJyYSB0ZXJtaW5hIGNvbiBcImFyXCIsIHNlIGxlIHF1aXRhbiBlc2FzIGRvcyBsZXRyYXNcbiAgICAgKi9cbiAgICBpZiAoc3RyLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoJ2FyJykpIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSBzdHIuc2xpY2UoMCwgLTIpXG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBTaSBsYSBwYWxhYnJhIGluaWNpYSBjb24gWiwgc2UgbGUgYcOxYWRlIFwicGVcIiBhbCBmaW5hbC5cbiAgICAgKi9cbiAgICBpZiAoc3RyLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgneicpKSB7XG4gICAgICAgIHRyYW5zbGF0aW9uICs9ICdwZSdcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFNpIGxhIHBhbGFicmEgdHJhZHVjaWRhIHRpZW5lIDEwIG8gbcOhcyBsZXRyYXMsXG4gICAgICogc2UgZGViZSBwYXJ0aXIgZW4gZG9zIHBvciBsYSBtaXRhZCB5IHVuaXIgY29uIHVuIGd1acOzbiBtZWRpb1xuICAgICAqL1xuICAgIGNvbnN0IGxlbmd0aCA9IHRyYW5zbGF0aW9uLmxlbmd0aFxuICAgIGlmIChsZW5ndGggPj0gMTApIHtcbiAgICAgICAgY29uc3QgZmlyc3RIYWxmID0gdHJhbnNsYXRpb24uc2xpY2UoMCwgTWF0aC5yb3VuZChsZW5ndGggLyAyKSlcbiAgICAgICAgY29uc3Qgc2Vjb25kdEhhbGYgPSB0cmFuc2xhdGlvbi5zbGljZShNYXRoLnJvdW5kKGxlbmd0aCAvIDIpKVxuICAgICAgICB0cmFuc2xhdGlvbiA9IGAke2ZpcnN0SGFsZn0tJHtzZWNvbmR0SGFsZn1gXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWluTWF5KHN0cikge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzdHIubGVuZ3RoXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbiA9ICcnXG4gICAgICAgIGxldCBjYXBpdGFsaXplID0gdHJ1ZVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJBdChpKVxuICAgICAgICAgICAgdHJhbnNsYXRpb24gKz0gY2FwaXRhbGl6ZSA/IGNoYXIudG9VcHBlckNhc2UoKSA6IGNoYXIudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgY2FwaXRhbGl6ZSA9ICFjYXBpdGFsaXplXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXZlcnNlKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJylcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFBvciDDumx0aW1vLCBzaSBsYSBwYWxhYnJhIG9yaWdpbmFsIGVzIHVuIHBhbMOtbmRyb21vLFxuICAgICAqIG5pbmd1bmEgcmVnbGEgYW50ZXJpb3IgY3VlbnRhIHkgc2UgZGV2dWVsdmUgbGEgbWlzbWEgcGFsYWJyYSBwZXJvXG4gICAgICogaW50ZXJjYWxhbmRvIGxldHJhcyBtYXnDunNjdWxhcyB5IG1pbsO6c2N1bGFzXG4gICAgICovXG4gICAgaWYgKHN0ciA9PSByZXZlcnNlKHN0cikpIHtcbiAgICAgICAgcmV0dXJuIG1pbk1heShzdHIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zbGF0aW9uXG59XG4iXSwibmFtZXMiOlsicGxhdHpvbSIsInN0ciIsInRyYW5zbGF0aW9uIiwidG9Mb3dlckNhc2UiLCJlbmRzV2l0aCIsInNsaWNlIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsImZpcnN0SGFsZiIsIk1hdGgiLCJyb3VuZCIsInNlY29uZHRIYWxmIiwibWluTWF5IiwiY2FwaXRhbGl6ZSIsImkiLCJjaGFyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJyZXZlcnNlIiwic3BsaXQiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFFZSxTQUFTQSxPQUFPLENBQUNDLEdBQUcsRUFBRTtFQUNqQyxJQUFJQyxXQUFXLEdBQUdELEdBQUcsQ0FBQTs7QUFFckI7QUFDSjtBQUNBO0VBQ0ksSUFBSUEsR0FBRyxDQUFDRSxXQUFXLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2xDRixXQUFXLEdBQUdELEdBQUcsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLEdBQUE7O0FBRUE7QUFDSjtBQUNBO0VBQ0ksSUFBSUosR0FBRyxDQUFDRSxXQUFXLEVBQUUsQ0FBQ0csVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ25DSixJQUFBQSxXQUFXLElBQUksSUFBSSxDQUFBO0FBQ3ZCLEdBQUE7O0FBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDSSxFQUFBLElBQU1LLE1BQU0sR0FBR0wsV0FBVyxDQUFDSyxNQUFNLENBQUE7RUFDakMsSUFBSUEsTUFBTSxJQUFJLEVBQUUsRUFBRTtBQUNkLElBQUEsSUFBTUMsU0FBUyxHQUFHTixXQUFXLENBQUNHLEtBQUssQ0FBQyxDQUFDLEVBQUVJLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM5RCxJQUFBLElBQU1JLFdBQVcsR0FBR1QsV0FBVyxDQUFDRyxLQUFLLENBQUNJLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3REwsSUFBQUEsV0FBVyxHQUFNTSxFQUFBQSxDQUFBQSxNQUFBQSxDQUFBQSxTQUFTLEVBQUlHLEdBQUFBLENBQUFBLENBQUFBLE1BQUFBLENBQUFBLFdBQVcsQ0FBRSxDQUFBO0FBQy9DLEdBQUE7RUFFQSxTQUFTQyxNQUFNLENBQUNYLEdBQUcsRUFBRTtBQUNqQixJQUFBLElBQU1NLE1BQU0sR0FBR04sR0FBRyxDQUFDTSxNQUFNLENBQUE7SUFDekIsSUFBSUwsV0FBVyxHQUFHLEVBQUUsQ0FBQTtJQUNwQixJQUFJVyxVQUFVLEdBQUcsSUFBSSxDQUFBO0lBQ3JCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHUCxNQUFNLEVBQUVPLENBQUMsRUFBRSxFQUFFO0FBQzdCLE1BQUEsSUFBTUMsS0FBSSxHQUFHZCxHQUFHLENBQUNlLE1BQU0sQ0FBQ0YsQ0FBQyxDQUFDLENBQUE7TUFDMUJaLFdBQVcsSUFBSVcsVUFBVSxHQUFHRSxLQUFJLENBQUNFLFdBQVcsRUFBRSxHQUFHRixLQUFJLENBQUNaLFdBQVcsRUFBRSxDQUFBO01BQ25FVSxVQUFVLEdBQUcsQ0FBQ0EsVUFBVSxDQUFBO0FBQzVCLEtBQUE7QUFFQSxJQUFBLE9BQU9YLFdBQVcsQ0FBQTtBQUN0QixHQUFBO0VBRUEsU0FBU2dCLE9BQU8sQ0FBQ2pCLEdBQUcsRUFBRTtBQUNsQixJQUFBLE9BQU9BLEdBQUcsQ0FBQ2tCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQ0QsT0FBTyxFQUFFLENBQUNFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUMzQyxHQUFBOztBQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSSxFQUFBLElBQUluQixHQUFHLElBQUlpQixPQUFPLENBQUNqQixHQUFHLENBQUMsRUFBRTtJQUNyQixPQUFPVyxNQUFNLENBQUNYLEdBQUcsQ0FBQyxDQUFBO0FBQ3RCLEdBQUE7QUFFQSxFQUFBLE9BQU9DLFdBQVcsQ0FBQTtBQUN0Qjs7OzsifQ==
